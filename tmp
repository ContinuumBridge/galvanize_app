diff --git a/config.json b/config.json
index abc2a0e..5b0cbde 100644
--- a/config.json
+++ b/config.json
@@ -1,9 +1,9 @@
 {
     "exe": "spur_app.py", 
     "description": "Spur Button App", 
-    "url": "https://github.com/ContinuumBridge/spur_app/archive/v0.7.5.tar.gz", 
+    "url": "https://github.com/ContinuumBridge/spur_app/archive/v0.7.6.tar.gz", 
     "app_resource": "/api/bridge/v1/app/37", 
-    "version": "0.7.5", 
+    "version": "0.7.6", 
     "provider": "ContinuumBridge", 
     "name": "Spur App"
-}
\ No newline at end of file
+}
diff --git a/spur_app_a.py b/spur_app_a.py
index 93f651f..fbe2320 100755
--- a/spur_app_a.py
+++ b/spur_app_a.py
@@ -2,6 +2,12 @@
 # spur_app_a.py
 """
 Copyright (c) 2015 ContinuumBridge Limited
+
+Allocation of addresses:
+Byte 1 MSB: 1=bridge, 0=node
+Byte 1[6:0]: the 7 LSBs of the bridge ID that a node first connected to
+Byte 0: allocated by bridge that node first connected to
+
 """
 
 import sys
@@ -40,11 +46,10 @@ Y_STARTS = (
     (0, 20, 40, 60, 80)
 );
 
-#SPUR_ADDRESS = int(os.getenv('CB_SPUR_ADDRESS', '0x0000'), 16)
-SPUR_ADDRESS        = int(CB_BID[3:])
+SPUR_ADDRESS        = 0x8000 | int(CB_BID[3:])
 CHECK_INTERVAL      = 30*60
-#CID                 = "CID157"         # Client ID Development/Staging
-CID                 = "CID249"          # Client ID Client Server
+CID                 = "CID157"         # Client ID Development/Staging
+#CID                 = "CID249"          # Client ID Client Server
 GRANT_ADDRESS       = 0xBB00
 PRESSED_WAKEUP      = 5*60              # How long node should sleep for in pressed state, seconds/2
 BEACON_START_DELAY  = 5                 # Delay before starting to send beacons to allow other things to start
@@ -75,6 +80,7 @@ class App(CbApp):
         self.nextWakeupTime     = {}
         self.beaconInterval     = 6
         self.beaconRunning      = False
+        self.findingRSSI        = None
         #self.ackCount          = 0           # Used purely for test of nack
 
         # Super-class init must be called
@@ -366,6 +372,19 @@ class App(CbApp):
         msg = self.formatRadioMessage(nodeAddr, "send_battery", self.setWakeup(nodeAddr))
         self.queueRadio(msg, nodeAddr, "send_battery")
 
+    def findRSSI(self, source):
+        self.findingRSSI =  source
+        msg= {
+            "id": self.id,
+            "length": length,
+            "request": "command",
+            "command": "get_rssi"
+        }
+        self.sendMessage(msg, self.adaptor)
+
+    def onRSSI(self, rssi):
+    
+
     def onRadioMessage(self, message):
         if self.radioOn:
             #self.cbLog("debug", "onRadioMessage")
@@ -375,15 +394,18 @@ class App(CbApp):
                 self.cbLog("warning", "onRadioMessage. Malformed radio message. Type: {}, exception: {}".format(type(ex), ex.args))
                 return
             #self.cbLog("debug", "Rx: destination: " + str("{0:#0{1}X}".format(destination,6)))
-            if destination == SPUR_ADDRESS:
-                source, hexFunction = struct.unpack(">HB", message[2:5])
-                try:
-                    function = (key for key,value in FUNCTIONS.items() if value==hexFunction).next()
-                except:
-                    function = "undefined"
-                if (source not in self.addr2id) and source != 0:
-                    self.cbLog("warning", "Radio message for node at unallocated address: " + str(source))
-                    return
+            #if destination == SPUR_ADDRESS:
+            source, hexFunction = struct.unpack(">HB", message[2:5])
+            try:
+                function = (key for key,value in FUNCTIONS.items() if value==hexFunction).next()
+            except:
+                function = "undefined"
+            if function == "woken_up":
+                self.findRSSI(source)
+            if (source not in self.addr2id) and source != 0:
+                self.cbLog("warning", "Radio message for node at unallocated address: " + str(source))
+                return
+
                 #hexMessage = message.encode("hex")
                 #self.cbLog("debug", "hex message after decode: " + str(hexMessage))
                 self.cbLog("debug", "Rx: " + function + " from button: " + str("{0:#0{1}x}".format(source,6)))
@@ -536,7 +558,6 @@ class App(CbApp):
         if self.beaconCalled == self.beaconInterval:
             self.sendQueued(True)
             self.beaconCalled = 0
-            #self.beaconInterval = random.randrange(5, 7, 1)
             self.beaconInterval = random.randrange(10, 14, 2)
             #self.cbLog("debug", "beaconInterval: {}".format(self.beaconInterval))
         else:
@@ -580,6 +601,8 @@ class App(CbApp):
         """
         In frames where a beacon is sent, don't send anything else apart from acks.
         """
+        if self.findingRSSI:
+            return
         now = time.time()
         sentLength = 0
         sentAck = []
@@ -672,6 +695,9 @@ class App(CbApp):
                                    {"characteristic": "spur",
                                     "channel": 6,
                                     "interval": 0
+                                   },
+                                   {"characteristic": "rssi",
+                                    "interval": 0
                                    }
                                   ]
                       }
@@ -687,6 +713,8 @@ class App(CbApp):
         #self.cbLog("debug", "onAdaptorData, message: " + str(message))
         if message["characteristic"] == "spur":
             self.onRadioMessage(base64.b64decode(message["data"]))
+        elif message["characteristic"] == "rssi":
+            self.onRSSI(message["data"])
 
     def readLocalConfig(self):
         global config
